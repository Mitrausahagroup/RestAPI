generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // bisa juga postgresql
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SUPERVISOR
}

enum Status {
  PENDING
  DISETUJUI
  DITOLAK
}

enum Varian {
  HALUS
  KASAR
}

enum Kondisi {
  BAIK
  RUSAK
}

model User {
  id         String       @id @default(uuid())
  name       String
  NIK        String       @unique
  password   String
  role       Role
  createdAt  DateTime     @default(now())

  pengambilan   Pengambilan[]
  penurunan     Penurunan[]
  pengembalian  Pengembalian[]
}

model Sales {
  id         String       @id @default(uuid())
  nama       String
  createdAt  DateTime     @default(now())
  toko       Toko[]
  pengambilan Pengambilan[]
  pengiriman  Penurunan[]
  pengembalian Pengembalian[]
}

model Barang {
  id         String           @id @default(uuid())
  nama       String
  varian     Varian
  stok       Int
  createdAt  DateTime         @default(now())

  pengambilanItem   PengambilanItem[]
  penurunanItem     PenurunanItem[]
  pengembalianItem  PengembalianItem[]
}

model Toko {
  id        String     @id @default(uuid())
  nama      String
  alamat    String
  fotoUrl   String     // WAJIB
  noHp      String
  lat       Float
  lon       Float
  createdAt DateTime     @default(now())

  sales     Sales     @relation(fields: [salesId], references: [id])
  salesId   String

  barcode   Barcode    @relation(name: "BarcodeOnToko",fields: [barcodeId], references: [id])
  barcodeId String     @unique

  pengiriman Penurunan[]

}

model Barcode {
  id        String     @id @default(uuid())
  isUsed    Boolean    @default(false)
  usedBy    String?    @unique
  createdAt  DateTime  @default(now())
  toko      Toko?      @relation(name: "BarcodeOnToko") 
}

model Pengambilan {
  id         String             @id @default(uuid())
  sales      Sales              @relation(fields: [salesId], references: [id])
  salesId    String
  user       User?               @relation(fields: [userId], references: [id])
  userId     String?
  fotoUrl    String?            // opsional
  status     Status             @default(PENDING)
  createdAt  DateTime           @default(now())

  items      PengambilanItem[]
}

model PengambilanItem {
  id             String        @id @default(uuid())
  pengambilan    Pengambilan   @relation(fields: [pengambilanId], references: [id])
  pengambilanId  String

  barang         Barang        @relation(fields: [barangId], references: [id])
  barangId       String
  jumlah         Int
}

model Penurunan {
  id         String           @id @default(uuid())
  sales      Sales            @relation(fields: [salesId], references: [id])
  salesId    String
  user       User?            @relation(fields: [userId], references: [id])
  userId     String?
  toko       Toko             @relation(fields: [tokoId], references: [id])
  tokoId     String
  fotoUrl    String?          // opsional
  createdAt  DateTime         @default(now())

  items      PenurunanItem[]
}

model PenurunanItem {
  id           String       @id @default(uuid())
  penurunan    Penurunan    @relation(fields: [penurunanId], references: [id])
  penurunanId  String

  barang       Barang       @relation(fields: [barangId], references: [id])
  barangId     String
  jumlah       Int
}

model Pengembalian {
  id         String             @id @default(uuid())
  user       User?               @relation(fields: [userId], references: [id])
  userId     String?
  sales      Sales              @relation(fields: [salesId], references: [id])
  salesId    String
  fotoUrl    String?            // opsional
  createdAt  DateTime           @default(now())

  items      PengembalianItem[]
}

model PengembalianItem {
  id              String         @id @default(uuid())
  pengembalian    Pengembalian   @relation(fields: [pengembalianId], references: [id])
  pengembalianId  String

  barang          Barang         @relation(fields: [barangId], references: [id])
  barangId        String
  jumlah          Int
  kondisi         Kondisi
}
