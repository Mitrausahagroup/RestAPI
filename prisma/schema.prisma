// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SUPERVISOR
  SALES
}

enum Status {
  PENDING
  DISETUJUI
  DITOLAK
}

enum Varian {
  HALUS
  KASAR
}

enum Kondisi{
  BAIK
  RUSAK
}

model users {
  id        String      @id @default(uuid())
  NIK       String      @unique
  password  String
  name      String
  role      Role     
  createdAt DateTime @default(now())

  pengambilan     pengambilan[]
  penurunan       penurunan[]
  pengembalian    pengembalian[]

  @@map("users")
}

model barang {
  id         String    @id @default(uuid())
  nama       String
  varian     Varian
  stok       Int
  createdAt  DateTime  @default(now())

  pengambilanItem     pengambilanItem[]
  penurunanItem       penurunanItem[]
  pengembalianItem    pengembalianItem[]

  @@map("barang")
}


model pengambilan {
  id         String              @id @default(uuid())
  user       users               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  items      pengambilanItem[]  // relasi ke banyak barang
  fotoUrl    String
  status     Status             @default(PENDING)
  createdAt  DateTime           @default(now())

  @@map("pengambilan")
}

model pengambilanItem {
  id             String        @id @default(uuid())
  pengambilan    pengambilan   @relation(fields: [pengambilanId], references: [id], onDelete: Cascade)
  pengambilanId  String

  barang         barang        @relation(fields: [barangId], references: [id], onDelete: Cascade)
  barangId       String
  jumlah         Int

  @@map("pengambilan_item")
}

model penurunan {
  id         String             @id @default(uuid())
  user       users              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  toko       String
  alamat     String

  items      penurunanItem[]   // relasi ke banyak barang
  fotoUrl    String
  createdAt  DateTime          @default(now())

  @@map("penurunan")
}

model penurunanItem {
  id           String         @id @default(uuid())
  penurunan    penurunan      @relation(fields: [penurunanId], references: [id], onDelete: Cascade)
  penurunanId  String

  barang       barang         @relation(fields: [barangId], references: [id], onDelete: Cascade)
  barangId     String
  jumlah       Int

  @@map("penurunan_item")
}

model pengembalian {
  id         String               @id @default(uuid())
  user       users                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  items      pengembalianItem[]  // relasi ke banyak barang
  fotoUrl    String
  createdAt  DateTime            @default(now())

  @@map("pengembalian")
}

model pengembalianItem {
  id             String           @id @default(uuid())
  pengembalian   pengembalian     @relation(fields: [pengembalianId], references: [id], onDelete: Cascade)
  pengembalianId String

  barang         barang           @relation(fields: [barangId], references: [id], onDelete: Cascade)
  barangId       String
  jumlah         Int
  kondisi        Kondisi
  
  @@map("pengembalian_item")
}

